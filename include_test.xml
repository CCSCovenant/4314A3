<?xml version="1.0"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" url="gcc-12.2.0.zip">

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="gcc-12.2.0/c++tools/resolver.cc" hash="6d5831a998d5255d87fcd23dc3500f6a4c5f3662"><comment type="block">/* C++ modules.  Experimental!	-*- c++ -*-
   Copyright (C) 2017-2022 Free Software Foundation, Inc.
   Written by Nathan Sidwell &lt;nathan@acm.org&gt; while at FaceBook

   This file is part of GCC.

   GCC is free software; you can redistribute it and/or modify it
   under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3, or (at your option)
   any later version.

   GCC is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING3.  If not see
&lt;http://www.gnu.org/licenses/&gt;.  */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"resolver.h"</cpp:file></cpp:include>
<comment type="line">// C++</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<comment type="line">// C</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<comment type="line">// OS</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> <comment type="line">// 1 for testing no mmap</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAPPED_READING</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IN_GCC</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMAP_FILE</name> <operator>&amp;&amp;</operator> <name>_POSIX_MAPPED_FILES</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAPPED_READING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAPPED_READING</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SYS_MMAN_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAPPED_READING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAPPED_READING</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>IN_GCC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>MAPPED_READING</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xmalloc</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>malloc(X)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HOST_HAS_O_CLOEXEC</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_CLOEXEC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DIR_SEPARATOR</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIR_SEPARATOR</name></cpp:macro> <cpp:value>'/'</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<constructor><name><name>module_resolver</name><operator>::</operator><name>module_resolver</name></name> <parameter_list>(<parameter><decl><type><name>bool</name></type> <name>map</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>xlate</name></decl></parameter>)</parameter_list>
  <member_init_list>: <call><name>default_map</name> <argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call>, <call><name>default_translate</name> <argument_list>(<argument><expr><name>xlate</name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
</block_content>}</block></constructor>

<destructor><name><name>module_resolver</name><operator>::</operator><name>~module_resolver</name></name> <parameter_list>()</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>fd_repo</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>close</name> <argument_list>(<argument><expr><name>fd_repo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></destructor>

<function><type><name>bool</name></type>
<name><name>module_resolver</name><operator>::</operator><name>set_repo</name></name> <parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;&amp;</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>force</name> <operator>||</operator> <call><name><name>repo</name><operator>.</operator><name>empty</name></name> <argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>repo</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>move</name></name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>force</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  <return>return <expr><name>force</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name><name>module_resolver</name><operator>::</operator><name>add_mapping</name></name> <parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;&amp;</modifier></type><name>module</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;&amp;</modifier></type><name>file</name></decl></parameter>,
			      <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>auto</name></type> <name>res</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>emplace</name></name> <argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name> <argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>res</name><operator>.</operator><name>second</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>force</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>force</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>res</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>second</name></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>move</name></name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><name>force</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name><name>module_resolver</name><operator>::</operator><name>read_tuple_file</name></name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>stat</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fstat</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><name>errno</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stat</name><operator>.</operator><name>st_size</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MAPPED_READING</name></expr></cpp:if>
  <comment type="line">// Just map the file, we're gonna read all of it, so no need for</comment>
  <comment type="line">// line buffering</comment>
  <expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>mmap</name> <argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name><name>stat</name><operator>.</operator><name>st_size</name></name></expr></argument>, <argument><expr><name>PROT_READ</name></expr></argument>, <argument><expr><name>MAP_PRIVATE</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><name>errno</name></expr>;</return></block_content></block></if></if_stmt>
  <struct>struct <name>Deleter</name> <block>{<public type="default">
    <function type="operator"><type><name>void</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content> <expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
  </public>}</block>;</struct>
  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>, <argument><expr><name>Deleter</name></expr></argument>&gt;</argument_list></name></type> <name>guard</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>Deleter</name><argument_list>{<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>stat</name><operator>.</operator><name>st_size</name></name></expr></argument>}</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>xmalloc</name> <argument_list>(<argument><expr><name><name>stat</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><name>errno</name></expr>;</return></block_content></block></if></if_stmt>
  <struct>struct <name>Deleter</name> <block>{<public type="default"> <function type="operator"><type><name>void</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function> </public>}</block>;</struct>
  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>void</name></expr></argument>, <argument><expr><name>Deleter</name></expr></argument>&gt;</argument_list></name></type> <name>guard</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>read</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>stat</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>stat</name><operator>.</operator><name>st_size</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><name>errno</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name>size_t</name></type> <name>prefix_len</name> <init>= <expr><ternary><condition><expr><name>prefix</name></expr> ?</condition><then> <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>lineno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>begin</name> <init>= <expr><cast type="reinterpret">reinterpret_cast <argument_list type="generic">&lt;<argument><expr><name>char</name> <specifier>const</specifier> <operator>*</operator></expr></argument>&gt;</argument_list> <argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></cast></expr></init></decl>,
	 <decl><type ref="prev"><modifier>*</modifier></type><name>end</name> <init>= <expr><name>begin</name> <operator>+</operator> <name><name>stat</name><operator>.</operator><name>st_size</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>eol</name></decl>;</init>
       <condition><expr><name>begin</name> <operator>!=</operator> <name>end</name></expr>;</condition> <incr><expr><name>begin</name> <operator>=</operator> <name>eol</name> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name>lineno</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>eol</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>find</name></name> <argument_list>(<argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>eol</name> <operator>==</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
	<comment type="line">// last line has no \n, ignore the line, you lose</comment>
	<break>break;</break></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>auto</name> <operator>*</operator><name>pos</name> <operator>=</operator> <name>begin</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>bool</name></type> <name>pfx_search</name> <init>= <expr><name>prefix_len</name> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <label><name>pfx_search</name>:</label>
      <while>while <condition>(<expr><operator>*</operator><name>pos</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>pos</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

      <expr_stmt><expr><name>auto</name> <operator>*</operator><name>space</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
      <while>while <condition>(<expr><operator>*</operator><name>space</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>space</name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>space</name> <operator>!=</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>space</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

      <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>space</name></expr>)</condition><block type="pseudo"><block_content>
	<comment type="line">// at end of line, nothing here	</comment>
	<continue>continue;</continue></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>pfx_search</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>size_t</name> <argument_list>(<argument><expr><name>space</name> <operator>-</operator> <name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>prefix_len</name>
	      <operator>&amp;&amp;</operator> <call><name><name>std</name><operator>::</operator><name>equal</name></name> <argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>space</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>pfx_search</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <expr_stmt><expr><name>pos</name> <operator>=</operator> <name>space</name></expr>;</expr_stmt>
	  <goto>goto <name>pfx_search</name>;</goto>
	</block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>module</name> <argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>space</name></expr></argument>)</argument_list></decl>;</decl_stmt>
      <while>while <condition>(<expr><operator>*</operator><name>space</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>space</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>space</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
      <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>file</name> <argument_list>(<argument><expr><name>space</name></expr></argument>, <argument><expr><name>eol</name></expr></argument>)</argument_list></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>module</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>module</name> <operator>==</operator> <literal type="string">"$root"</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>set_repo</name> <argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <return>return <expr><name>lineno</name></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><call><name><name>file</name><operator>.</operator><name>empty</name></name> <argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>GetCMIName</name> <argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <expr_stmt><expr><call><name>add_mapping</name> <argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name> <argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type>
<name><name>module_resolver</name><operator>::</operator><name>GetCMISuffix</name></name> <parameter_list>()</parameter_list>
<block>{<block_content>
  <return>return <expr><literal type="string">"gcm"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>module_resolver</name> <modifier>*</modifier></type>
<name><name>module_resolver</name><operator>::</operator><name>ConnectRequest</name></name> <parameter_list>(<parameter><decl><type><name><name>Cody</name><operator>::</operator><name>Server</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>version</name></decl></parameter>,
				 <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>version</name> <operator>||</operator> <name>version</name> <operator>&gt;</operator> <name><name>Cody</name><operator>::</operator><name>Version</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>ErrorResponse</name></name> <argument_list>(<argument><expr><literal type="string">"version mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>a</name> <operator>!=</operator> <literal type="string">"GCC"</literal></expr>)</condition><block type="pseudo"><block_content>
    <comment type="line">// Refuse anything but GCC</comment>
    <expr_stmt><expr><call><name>ErrorResponse</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name> <argument_list>(<argument><expr><literal type="string">"only GCC supported"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>ident</name><operator>.</operator><name>empty</name></name> <argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>ident</name> <operator>!=</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
    <comment type="line">// Failed ident check</comment>
    <expr_stmt><expr><call><name>ErrorResponse</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name> <argument_list>(<argument><expr><literal type="string">"bad ident"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <comment type="line">// Success!</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>ConnectResponse</name></name> <argument_list>(<argument><expr><literal type="string">"gcc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <return>return <expr><name>this</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name><name>module_resolver</name><operator>::</operator><name>ModuleRepoRequest</name></name> <parameter_list>(<parameter><decl><type><name><name>Cody</name><operator>::</operator><name>Server</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>PathnameResponse</name></name> <argument_list>(<argument><expr><name>repo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name><name>module_resolver</name><operator>::</operator><name>cmi_response</name></name> <parameter_list>(<parameter><decl><type><name><name>Cody</name><operator>::</operator><name>Server</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>module</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>auto</name></type> <name>iter</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>find</name></name> <argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <call><name><name>map</name><operator>.</operator><name>end</name></name> <argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>file</name> <init>= <expr><ternary><condition><expr><name>default_map</name></expr> ?</condition><then> <expr><call><name>GetCMIName</name> <argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>std</name><operator>::</operator><name>string</name></name> <argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>auto</name></type> <name>res</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>emplace</name></name> <argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>iter</name> <operator>=</operator> <name><name>res</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name><name>iter</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>empty</name></name> <argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>ErrorResponse</name></name> <argument_list>(<argument><expr><literal type="string">"no such module"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>PathnameResponse</name></name> <argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name><name>module_resolver</name><operator>::</operator><name>ModuleExportRequest</name></name> <parameter_list>(<parameter><decl><type><name><name>Cody</name><operator>::</operator><name>Server</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>Cody</name><operator>::</operator><name>Flags</name></name></type></decl></parameter>,
				      <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>module</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>cmi_response</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name><name>module_resolver</name><operator>::</operator><name>ModuleImportRequest</name></name> <parameter_list>(<parameter><decl><type><name><name>Cody</name><operator>::</operator><name>Server</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>Cody</name><operator>::</operator><name>Flags</name></name></type></decl></parameter>,
				      <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>module</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>cmi_response</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name><name>module_resolver</name><operator>::</operator><name>IncludeTranslateRequest</name></name> <parameter_list>(<parameter><decl><type><name><name>Cody</name><operator>::</operator><name>Server</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>Cody</name><operator>::</operator><name>Flags</name></name></type></decl></parameter>,
					  <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>include</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>auto</name></type> <name>iter</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>find</name></name> <argument_list>(<argument><expr><name>include</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <call><name><name>map</name><operator>.</operator><name>end</name></name> <argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>default_translate</name></expr>)</condition>
    <block>{<block_content>
      <comment type="line">// Not found, look for it</comment>
      <decl_stmt><decl><type><name>auto</name></type> <name>file</name> <init>= <expr><call><name>GetCMIName</name> <argument_list>(<argument><expr><name>include</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>statbuf</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_FSTATAT</name></expr></cpp:if>
      <decl_stmt><decl><type><name>int</name></type> <name>fd_dir</name> <init>= <expr><name>AT_FDCWD</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>repo</name><operator>.</operator><name>empty</name></name> <argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>fd_repo</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>fd_repo</name> <operator>=</operator> <call><name>open</name> <argument_list>(<argument><expr><call><name><name>repo</name><operator>.</operator><name>c_str</name></name> <argument_list>()</argument_list></call></expr></argument>,
			      <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_CLOEXEC</name> <operator>|</operator> <name>O_DIRECTORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><name>fd_repo</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>fd_repo</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	  <expr_stmt><expr><name>fd_dir</name> <operator>=</operator> <name>fd_repo</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>repo</name><operator>.</operator><name>empty</name></name> <argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>fd_repo</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><call><name>fstatat</name> <argument_list>(<argument><expr><name>fd_dir</name></expr></argument>, <argument><expr><call><name><name>file</name><operator>.</operator><name>c_str</name></name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>statbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
	       <operator>||</operator> <operator>!</operator><call><name>S_ISREG</name> <argument_list>(<argument><expr><name><name>statbuf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <decl_stmt><decl><type><name>auto</name></type> <name>append</name> <init>= <expr><name>repo</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>append</name><operator>.</operator><name>push_back</name></name> <argument_list>(<argument><expr><name>DIR_SEPARATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>append</name><operator>.</operator><name>append</name></name> <argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>stat</name> <argument_list>(<argument><expr><call><name><name>append</name><operator>.</operator><name>c_str</name></name> <argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>statbuf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
	  <operator>||</operator> <operator>!</operator><call><name>S_ISREG</name> <argument_list>(<argument><expr><name><name>statbuf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><block type="pseudo"><block_content>
	<comment type="line">// Mark as not present</comment>
	<expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>clear</name></name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <decl_stmt><decl><type><name>auto</name></type> <name>res</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>emplace</name></name> <argument_list>(<argument><expr><name>include</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>iter</name> <operator>=</operator> <name><name>res</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <call><name><name>map</name><operator>.</operator><name>end</name></name> <argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>iter</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>empty</name></name> <argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>BoolResponse</name></name> <argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>PathnameResponse</name></name> <argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This handles a client notification to the server that a CMI has been
   produced for a module.  For this simplified server, we just accept
   the transaction and respond with "OK".  */</comment>

<function><type><name>int</name></type>
<name><name>module_resolver</name><operator>::</operator><name>ModuleCompiledRequest</name></name> <parameter_list>(<parameter><decl><type><name><name>Cody</name><operator>::</operator><name>Server</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>Cody</name><operator>::</operator><name>Flags</name></name></type></decl></parameter>,
				      <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>OKResponse</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
</unit>
